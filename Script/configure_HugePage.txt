1. Edit the memlock setting in the /etc/security/limits.conf file. The memlock setting is specified in KB and set slightly lesser than the installed RAM. For example, if you have 64GB RAM installed, add the following entries to increase the max locked memory limit. And the setting is at least the size of the HugePages allocation in KB (HugePages * Hugepagesize).

*   soft   memlock    60397977
*   hard   memlock    60397977
You can also set the memlock value higher than your SGA requirements.

2. Login as the oracle user again and run the ulimit -l command to verify the new memlock setting:
	$ ulimit -l
	60397977

3. Run the following command to display the value of Hugepagesize variable:
	$ grep Hugepagesize /proc/meminfo

4. Complete the following procedure to create a script that computes recommended values for hugepages configuration for the current shared memory segments:
	a. Create a text file named hugepages_settings.sh.
	b. Run the following command to change the permission of the file:
		$ chmod +x hugepages_settings.sh

5. Run the hugepages_settings.sh script to compute the values for hugepages configuration:
	$ ./hugepages_settings.sh

6. Set the following kernel parameter or  Edit the "/etc/sysctl.conf" file as the "root" user. You should set the value greater than or equal to the value displayed by the script
	# sysctl -w vm.nr_hugepages=<value_displayed_in_step_5>
	
7. To make the value of the parameter available for every time you restart the computer, edit the /etc/sysctl.conf file and add the following entry:
	vm.nr_hugepages=value_displayed_in_step_5
	
8. Restart the server.

9. To check the available hugepages, run the following command:
	$ grep Huge /proc/meminfo

10. To determine how much memory you are currently using to support the page table, run the following command at a time when the server is under normal/heavy load
	# grep PageTables /proc/meminfo
	PageTables:      1244880 kB

	
//////////////////////////////////////////////////////////////////////////////
///		Restrictions for HugePages Configuration						   ///
//////////////////////////////////////////////////////////////////////////////
Automatic Memory Management (AMM) and HugePages are not compatible. When you use AMM, the entire SGA memory is allocated by creating files under /dev/shm. When Oracle Database allocates SGA with AMM, HugePages are not reserved. To use HugePages on Oracle Database 12c, You must disable AMM.

If you are using VLM in a 32-bit environment, then you cannot use HugePages for the Database Buffer cache. You can use HugePages for other parts of the SGA, such as shared_pool, large_pool, and so on. Memory allocation for VLM (buffer cache) is done using shared memory file systems (ramfs/tmpfs/shmfs). Memory file systems do not reserve or use HugePages.

HugePages are not subject to allocation or release after system startup, unless a system administrator changes the HugePages configuration, either by modifying the number of pages available, or by modifying the pool size. If the space required is not reserved in memory during system startup, then HugePages allocation fails.





-----------------Disable AMM------------------------------
Disable AMM
  SQL> alter system reset memory_max_target scope=spfile sid='*';
  SQL> alter system reset memory_target scope=spfile sid='*';

Enable ASMM
  SQL> alter system set SGA_MAX_SIZE=1400m scope=spfile sid='*';
  SQL> alter system set SGA_TARGET=1000m scope=spfile sid='*'; 
  SQL> alter system set PGA_AGGREGATE_TARGET=480m scope=spfile sid='*'; 

 Reboot database
 
 ------------------Memory Diagnosing-------------------------
 SQL> select sum(bytes/1024/1024) Current_SGA_SIZE_in_MB from v$sgastat;
CURRENT_SGA_SIZE_IN_MB
----------------------
        17645.7003
SQL> select sum(bytes/1024/1024) MAX_SGA_SIZE_in_MB from v$sgainfo where name = 'Maximum SGA Size';
MAX_SGA_SIZE_IN_MB
------------------
    32621.7031
SQL> show parameter memory_max_target;
NAME                     TYPE     VALUE
------------------------------------ ----------- ------------------------------
memory_max_target             big integer 32G
SQL> select (value/1024/1024) Current_PGA_IN_USE_in_MB from v$pgastat where name = 'total PGA inuse';
CURRENT_PGA_IN_USE_IN_MB
------------------------
          297.489258
SQL> select (value/1024/1024) MAX_PGA_ALLOCATED_in_MB from v$pgastat where name = 'maximum PGA allocated';
MAX_PGA_ALLOCATED_IN_MB
-----------------------
         1402.94434
SQL> select (value/1024/1024) PGA_TARGET_in_MB    from v$pgastat where name = 'aggregate PGA target parameter';
PGA_TARGET_IN_MB
----------------
         14976
Our current AMM uses the following memory
 - memory reserved  for PGA/SGA: 32G 
 - current PGA size 297.489258 MB
 - current SGA size 17645.7003 MB
 - free memory for future PGA/SGA usage: 15G

For switching ASMM this can be translated into 
  SGA_MAX_SIZE             : 1400 MByte
  SGA_TARGET               : 1000 MByte
  PGA_AGGREGATE_TARGET     :  480 Mbyte

For further tuning check : V$PGA_TARGET_ADVICE